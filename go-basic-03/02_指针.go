package main

import "fmt"

func main() {
	/*
		一个指针变量可以指向任何一个值的内存地址，它所指向的值的内存地址在 32 和 64 位
		机器上分别占用 4 或 8 个字节，占用字节的大小与所指向的值的大小无关。

		当一个指针被定义后`没有分配到任何变量`时，它的默认值为 `nil`。

		Go语言中使用在变量名前面添加`&`操作符（前缀）来获取变量的内存地址（取地址操作）

		其中 v 代表被取地址的变量，变量 v 的地址使用变量 ptr 进行接收，ptr 的类型为*T，称做 T 的指针类型，*代表指针。
		ptr := &v  v 的类型为 T
	*/

	// var cat int = 1
	// var str string = "ms的go教程"
	// // %p  指针，十六进制
	// fmt.Printf("%p %p", &cat, &str)

	// 指针和变量
	fmt.Println("------------------")
	var room int = 10
	var ptr = &room
	fmt.Printf("%p \n", &room)
	fmt.Printf("%T, %p \n", ptr, ptr)
	fmt.Println("指针地址:", ptr)
	fmt.Println("指针地址代表的值:", *ptr)

	/*
		    取地址操作符`&`和取值操作符`*`是一对互补操作符，`&`取出地址，`*`根据地址取出地址指向的值

			变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：

			- 对变量进行取地址操作使用`&`操作符，可以获得这个变量的指针变量。
			- 指针变量的值是指针地址。
			- 对指针变量进行取值操作使用`*`操作符，可以获得指针变量指向的原变量的值。
	*/

}
